// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/diagnostics/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/diagnostics/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/diagnostics/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/finance/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/finance/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/finance/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/hr/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/hr/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/hr/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/inpatient/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/inpatient/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/inpatient/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/operation-theater/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/operation-theater/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/operation-theater/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/outpatient/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/outpatient/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/outpatient/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/pharmacy/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/pharmacy/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/pharmacy/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/purchasing/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/purchasing/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/purchasing/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/rostering/[[...slug]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/rostering/[[...slug]]">> = Specific
  const handler = {} as typeof import("../../src/app/rostering/[[...slug]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/core/appointments/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/core/appointments">> = Specific
  const handler = {} as typeof import("../../src/app/api/core/appointments/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/core/billing/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/core/billing">> = Specific
  const handler = {} as typeof import("../../src/app/api/core/billing/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/core/consultations/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/core/consultations">> = Specific
  const handler = {} as typeof import("../../src/app/api/core/consultations/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/inpatient/admissions/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/inpatient/admissions">> = Specific
  const handler = {} as typeof import("../../src/app/api/inpatient/admissions/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api">> = Specific
  const handler = {} as typeof import("../../src/app/api/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
